name: AI-Fix-Build
on:
  workflow_run:
    workflows: ["Build-ESP32-S3"]   # fires after the build job
    types: [completed]

jobs:
  attempt-fix:
    # Run only if the previous workflow concluded with “failure”
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      # 1 – Check out the repo so we can apply patches
      - uses: actions/checkout@v4

      # 2 – Download the build log produced by the failing run (v4 action)
      - uses: actions/download-artifact@v4  # ← official download action
        with:
          name: build-log                   # artifact name from build.yml

      # 3 – Set up Python and OpenAI client
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install openai

      # 4 – Generate a patch from the log using GPT-4o
      - name: Generate patch
        run: python .github/scripts/generate_patch.py build-log/build-log.txt

      # 5 – Apply the patch and push it as a new branch / PR
      - name: Apply & push
        run: |
          git config user.name  "auto-fix-bot"
          git config user.email "bot@example.com"

          # Apply diff if one was produced
          if [ -s patch.diff ]; then
            git apply --reject --whitespace=nowarn patch.diff || true
          fi

          # Only push if there are real code changes
          if ! git diff --quiet; then
            branch="ai/fix-${GITHUB_RUN_ID}"
            git checkout -b "$branch"
            git add -A
            git commit -m "AI: attempt to fix build"
            git push -u origin "$branch"
          else
            echo "No changes from AI – nothing to push."
          fi
